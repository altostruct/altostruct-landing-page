{"version":3,"file":"commons-5c3225519b5088eda14c.js","mappings":"8HAAA,IAAIA,EAAM,CACT,wBAAyB,KACzB,yBAA0B,MAI3B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,M,yGCpBdY,EAAkBC,EAAAA,cAAoB,OACtCC,EAAmB,SAACC,GAAgB,IAAD,EAEvC,OADAC,QAAQC,IAAI,YAAaF,GAEvB,gBAACH,EAAgBM,SAAjB,CAA0BC,MAAK,UAAEJ,EAAMK,YAAYC,YAApB,QAA4B,OACxDN,EAAMO,WAKAC,EAAc,WACzB,OAAOC,EAAAA,EAAAA,YAAWZ,IAGPa,EAAe,SAACC,GAC3B,OAAO,SAACX,GACN,OACE,gBAACD,EAAqBC,EACpB,gBAACW,EAAOX,O,0DCfVY,EADoBC,EAAQ,MACEC,QAgEpC,IApDuB,WAErB,IAAMC,GAAWP,EAAAA,EAAAA,MA+CjB,MAAO,CAAEQ,EA5CC,SAACC,EAAcC,GACvB,IAAMC,EAAeN,EAAAA,KAAAA,CAAQ,KAAcE,EAAW,qBAQtD,GANKI,EAAaC,eAAeH,GAG/BA,EAAOE,EAAaF,GAFpBhB,QAAQoB,KAAK,wBAA0BJ,EAAO,KAK5CC,EAEF,IAAK,IAAMI,KAAeJ,EAAW,CACnC,IAAIK,EAAQ,IAAIC,OAAJ,KAAgBF,EAAhB,KAAiC,KAC7CL,EAAOA,EAAKQ,QAAQF,EAAOL,EAAUI,IAGzC,OAAOL,GA4BGF,SAAUA,EAAUW,YAxBZ,SAACX,GAEnB,IAAIY,EAAmBC,OAAOC,SAASC,SAASC,MAAM,KAAKC,MAAM,GAE3DC,EAAgBrB,EAAUsB,SAASP,EAAiB,IACpDQ,EAxCsB,QAwCLpB,EAAgC,KAAOA,EAE9Da,OAAOC,SAASO,KAAO,GAGrBR,OAAOC,SAASC,SADdG,EACyB,CAACE,GAAD,eAAoBR,EAAiBK,MAAM,KACnEK,QAAO,SAACC,GAAD,OAAyB,OAAZA,GAA+B,IAAXA,KACxCC,KAAK,KAEmB,CAACJ,GAAD,eAAoBR,IAC5CU,QAAO,SAACC,GAAD,OAAyB,OAAZA,GAA+B,IAAXA,KACxCC,KAAK,MAQ8CJ,eA3D5B,OAyD5BpB,EAA+B,IAAM,IAAMA,EAAW,O,iBCjE1DpB,EAAOC,QAAU,CACf4C,iBAAkB,IAGlBC,mBAAmB,EAGnBC,iBAAkB,cAKlBC,YAAa,EAGbC,aAAa,EAGbC,cAAc,EACdC,OAAQ,CACNC,IAAK,CAAC,mBACNC,WAAY,CAAC,mBAEbC,IAAK,CAAC,aACNC,KAAM,CAAC,aAEPC,IAAK,CAAC,mBACNC,GAAI,CAAC,mBACLC,GAAI,CAAC,mBACLC,IAAK,CAAC,YACNC,IAAK,CAAC,YAENC,QAAS,CAAC,oBAGZC,WAAY,OAGZ3C,QAAS,CAAC,KAAM,OAGhB4C,mBAAoB,IAIpBC,OAAQ,kCAKRC,WAAOC,EAIPC,MAAM,EAGNC,mBAAmB,EAGnBC,uBAAuB,EAIvBC,SAAS,EAGTC,gBAAgB,EAGhBC,oBAAqB,O","sources":["webpack://altostruct-website-gatsby/./locales/ sync ^\\.\\/.*\\/translation\\.json$","webpack://altostruct-website-gatsby/./src/contexts/LanguageContext.tsx","webpack://altostruct-website-gatsby/./src/hooks/useTranslation.ts","webpack://altostruct-website-gatsby/./i18next-parser.config.js"],"sourcesContent":["var map = {\n\t\"./en/translation.json\": 7551,\n\t\"./swe/translation.json\": 8065\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3936;","import React, { ReactNode, useContext } from \"react\";\n\n// TODO change to null\nconst LanguageContext = React.createContext(\"swe\");\nconst LanguageProvider = (props: any) => {\n  console.log(\"Context: \", props);\n  return (\n    <LanguageContext.Provider value={props.pageContext.lang ?? \"---\"}>\n      {props.children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  return useContext(LanguageContext);\n};\n\nexport const withLanguage = (El: (props: any) => JSX.Element) => {\n  return (props: any) => {\n    return (\n      <LanguageProvider {...props}>\n        <El {...props}></El>\n      </LanguageProvider>\n    );\n  };\n};\nexport default LanguageProvider;\n","import { stringify } from \"postcss\";\nimport * as react from \"react\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\nimport useLocation from \"./useLocation\";\n\nconst translationConfig = require(\"../../i18next-parser.config.js\");\nconst LANGUAGES = translationConfig.locales;\n\nexport const DEFAULT_LANGUAGE = \"swe\";\n/**\n *\n * Usage:\n *        without any replacements \"t(\"Hello\")\"\n *        with replacements \"t(\"Hello {{name}}\"\"\", {name: \"Erik\"})\n *\n * @returns a translated string\n * @param currentPath the current path as a string\n */\nconst useTranslation = () => {\n  // const currentPath = useLocation();\n  const language = useLanguage();\n\n  /**Returns a translated string with values of any existing variable.*/\n  const t = (text: string, variables?: Record<string, any>): string => {\n    const translations = require(\"@locales/\" + language + \"/translation.json\");\n\n    if (!translations.hasOwnProperty(text)) {\n      console.warn(\"No translation for: '\" + text + \"'\");\n    } else {\n      text = translations[text];\n    }\n\n    if (variables) {\n      // replace each variable with its value\n      for (const variableKey in variables) {\n        let regex = new RegExp(`{{${variableKey}}}`, \"g\");\n        text = text.replace(regex, variables[variableKey]);\n      }\n    }\n    return text;\n  };\n\n  /**Sets the URL to the correct language.*/\n  const setLanguage = (language: string) => {\n    //remove the first element, allways starts with a dash\n    let currentPathSplit = window.location.pathname.split(\"/\").slice(1);\n\n    const isLanguageSet = LANGUAGES.includes(currentPathSplit[0]);\n    const languagePrefix = language === DEFAULT_LANGUAGE ? null : language;\n\n    window.location.hash = \"\";\n\n    if (isLanguageSet) {\n      window.location.pathname = [languagePrefix, ...currentPathSplit.slice(1)]\n        .filter((subPath) => subPath !== null && subPath != \"\")\n        .join(\"/\");\n    } else {\n      window.location.pathname = [languagePrefix, ...currentPathSplit]\n        .filter((subPath) => subPath !== null && subPath != \"\")\n        .join(\"/\");\n    }\n  };\n\n  //language part of url, no language if default\n  const languagePrefix =\n    language == DEFAULT_LANGUAGE ? \"/\" : \"/\" + language + \"/\";\n\n  return { t, language: language, setLanguage: setLanguage, languagePrefix };\n};\n\nexport default useTranslation;\n","module.exports = {\n  contextSeparator: \"_\",\n  // Key separator used in your translation keys\n\n  createOldCatalogs: true,\n  // Save the \\_old files\n\n  defaultNamespace: \"translation\",\n  // Default namespace used in your i18next config\n\n  // Default value to give to empty keys\n\n  indentation: 2,\n  // Indentation of the catalog files\n\n  keepRemoved: false,\n  // Keep keys from the catalog that are no longer in code\n\n  keySeparator: false,\n  lexers: {\n    hbs: [\"HandlebarsLexer\"],\n    handlebars: [\"HandlebarsLexer\"],\n\n    htm: [\"HTMLLexer\"],\n    html: [\"HTMLLexer\"],\n\n    mjs: [\"JavascriptLexer\"],\n    js: [\"JavascriptLexer\"], // if you're writing jsx inside .js files, change this to JsxLexer\n    ts: [\"JavascriptLexer\"],\n    jsx: [\"JsxLexer\"],\n    tsx: [\"JsxLexer\"],\n\n    default: [\"JavascriptLexer\"],\n  },\n\n  lineEnding: \"auto\",\n  // Control the line ending. See options at https://github.com/ryanve/eol\n\n  locales: [\"en\", \"swe\"],\n  // An array of the locales in your applications\n\n  namespaceSeparator: \":\",\n  // Namespace separator used in your translation keys\n  // If you want to use plain english keys, separators such as `.` and `:` will conflict. You might want to set `keySeparator: false` and `namespaceSeparator: false`. That way, `t('Status: Loading...')` will not think that there are a namespace and three separator dots for instance.\n\n  output: \"locales/$LOCALE/$NAMESPACE.json\",\n  // Supports $LOCALE and $NAMESPACE injection\n  // Supports JSON (.json) and YAML (.yml) file formats\n  // Where to write the locale files relative to process.cwd()\n\n  input: undefined,\n  // An array of globs that describe where to look for source files\n  // relative to the location of the configuration file\n\n  sort: true,\n  // Whether or not to sort the catalog\n\n  skipDefaultValues: false,\n  // Whether to ignore default values.\n\n  useKeysAsDefaultValue: true,\n  // Whether to use the keys as the default value; ex. \"Hello\": \"Hello\", \"World\": \"World\"\n  // This option takes precedence over the `defaultValue` and `skipDefaultValues` options\n\n  verbose: false,\n  // Display info about the parsing including some stats\n\n  failOnWarnings: false,\n  // Exit with an exit code of 1 on warnings\n\n  customValueTemplate: null,\n  // If you wish to customize the value output the value as an object, you can set your own format.\n  // ${defaultValue} is the default value you set in your translation function.\n  // Any other custom property will be automatically extracted.\n  //\n  // Example:\n  // {\n  //   message: \"${defaultValue}\",\n  //   description: \"${maxLength}\", // t('my-key', {maxLength: 150})\n  // }\n}\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","LanguageContext","React","LanguageProvider","props","console","log","Provider","value","pageContext","lang","children","useLanguage","useContext","withLanguage","El","LANGUAGES","require","locales","language","t","text","variables","translations","hasOwnProperty","warn","variableKey","regex","RegExp","replace","setLanguage","currentPathSplit","window","location","pathname","split","slice","isLanguageSet","includes","languagePrefix","hash","filter","subPath","join","contextSeparator","createOldCatalogs","defaultNamespace","indentation","keepRemoved","keySeparator","lexers","hbs","handlebars","htm","html","mjs","js","ts","jsx","tsx","default","lineEnding","namespaceSeparator","output","input","undefined","sort","skipDefaultValues","useKeysAsDefaultValue","verbose","failOnWarnings","customValueTemplate"],"sourceRoot":""}